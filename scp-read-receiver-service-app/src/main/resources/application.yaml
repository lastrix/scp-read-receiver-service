########## Framework related configuration goes here ################
spring:
  profiles:
    active: 'prod'
  application:
    name: 'scp-read-receive-service'
  datasource:
    # right now we work only with PostgreSQL so no reason to add
    # env variable usage
    driver-class-name: 'org.postgresql.Driver'
    url: "${SCP_RRS_DB_URL}"
    username: "${SCP_RRS_DB_USERNAME}"
    password: "${SCP_RRS_DB_PASSWORD}"
# no liquibase configuration here, this work performed by write service

server:
  port: "${SCP_RRS_HTTP_PORT:8080}"
  servlet:
    encoding:
      # enforce unicode encoding
      charset: 'UTF-8'
      force-response: 'true'

########## Application related configuration goes here ##############

scp:
  kafka:
    topics:
      receive: "${SCP_RRS_KAFKA_TOPICS_RECEIVE:select-direct-0}"
      confirm:
        template: "${SCP_RRS_KAFKA_TOPICS_CONFIRM_TEMPLATE:select-indirect-}"
    url: "${SCP_RRS_KAFKA_URL:localhost:29092}"
  rrs:
    worker:
      channels:
        start: "${SCP_RRS_CHANNEL_START:0}"
        end: "${SCP_RRS_CHANNEL_END:1}"
        mask: "${SCP_RRS_CHANNEL_MASK:0}"
        count: "${SCP_RRS_CHANNEL_COUNT:1}"
      parallelism: "${SCP_RRS_WORKER_PARALLELISM:2}"
      max-processing-chunk: "${SCP_RRS_WORKER_MAX_PROCESSING_CHUNK:1024}"
    receiver:
      chunk-size: "${SCP_RRS_RECEIVER_CHUNK_SIZE:32}"
      max-chunk-size: "${SCP_RRS_RECEIVER_MAX_CHUNK_SIZE:64}"
      receive-buffer-size: "${SCP_RRS_RECEIVER_RECEIVE_BUFFER_SIZE:128}"

